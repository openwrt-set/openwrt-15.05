From 6a63640eddf25f17d7794bcc188092c8a227f52f Mon Sep 17 00:00:00 2001
From: Dmitry Peresypkin <dperesypkin@radiofid.ru>
Date: Tue, 17 Oct 2017 15:29:42 +0300
Subject: [PATCH 52/57] i2c: MIPS: adds relink I2C driver

---
 .../devicetree/bindings/i2c/i2c-ralink.txt         |  27 ++
 drivers/i2c/busses/Kconfig                         |   4 +
 drivers/i2c/busses/Makefile                        |   1 +
 drivers/i2c/busses/i2c-ralink.c                    | 379 +++++++++++++++++++++
 4 files changed, 411 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/i2c/i2c-ralink.txt
 create mode 100644 drivers/i2c/busses/i2c-ralink.c

--- /dev/null
+++ b/Documentation/devicetree/bindings/i2c/i2c-ralink.txt
@@ -0,0 +1,27 @@
+I2C for Ralink platforms
+
+Required properties :
+- compatible : Must be "link,rt3052-i2c"
+- reg: physical base address of the controller and length of memory mapped
+     region.
+- #address-cells = <1>;
+- #size-cells = <0>;
+
+Optional properties:
+- Child nodes conforming to i2c bus binding
+
+Example :
+
+palmbus@10000000 {
+	i2c@900 {
+		compatible = "link,rt3052-i2c";
+		reg = <0x900 0x100>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		hwmon@4b {
+			compatible = "national,lm92";
+			reg = <0x4b>;
+		};
+	};
+};
--- a/drivers/i2c/busses/Kconfig
+++ b/drivers/i2c/busses/Kconfig
@@ -711,6 +711,10 @@ config I2C_RK3X
 	  This driver can also be built as a module. If so, the module will
 	  be called i2c-rk3x.
 
+config I2C_RALINK
+	tristate "Ralink I2C Controller"
+	select OF_I2C
+
 config HAVE_S3C2410_I2C
 	bool
 	help
--- a/drivers/i2c/busses/Makefile
+++ b/drivers/i2c/busses/Makefile
@@ -66,6 +66,7 @@ obj-$(CONFIG_I2C_PNX)		+= i2c-pnx.o
 obj-$(CONFIG_I2C_PUV3)		+= i2c-puv3.o
 obj-$(CONFIG_I2C_PXA)		+= i2c-pxa.o
 obj-$(CONFIG_I2C_PXA_PCI)	+= i2c-pxa-pci.o
+obj-$(CONFIG_I2C_RALINK)	+= i2c-ralink.o
 obj-$(CONFIG_I2C_QUP)		+= i2c-qup.o
 obj-$(CONFIG_I2C_RIIC)		+= i2c-riic.o
 obj-$(CONFIG_I2C_RK3X)		+= i2c-rk3x.o
--- /dev/null
+++ b/drivers/i2c/busses/i2c-ralink.c
@@ -0,0 +1,379 @@
+/*
+ * drivers/i2c/busses/i2c-ralink.c
+ *
+ * Copyright (C) 2013 Steven Liu <steven_liu@mediatek.com>
+ *
+ * Improve driver for i2cdetect from i2c-tools to detect i2c devices on the bus.
+ * (C) 2014 Sittisak <sittisaks@hotmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/reset.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/platform_device.h>
+#include <linux/of_platform.h>
+#include <linux/i2c.h>
+#include <linux/io.h>
+#include <linux/err.h>
+
+#include <asm/mach-ralink/ralink_regs.h>
+
+#define REG_CONFIG_REG		0x00
+#define REG_CLKDIV_REG		0x04
+#define REG_DEVADDR_REG		0x08
+#define REG_ADDR_REG		0x0C
+#define REG_DATAOUT_REG		0x10
+#define REG_DATAIN_REG		0x14
+#define REG_STATUS_REG		0x18
+#define REG_STARTXFR_REG	0x1C
+#define REG_BYTECNT_REG		0x20
+#define REG_SM0CFG2			0x28
+#define REG_SM0CTL0			0x40
+
+#define SYSC_REG_RESET_CTRL	0x34
+
+#define I2C_ADDRLEN_OFFSET	5
+#define I2C_DEVADLEN_OFFSET	2
+#define I2C_ADDRLEN_MASK	0x3
+#define I2C_ADDR_DIS		BIT(1)
+#define I2C_DEVADDR_DIS		BIT(0)
+#define I2C_ADDRLEN_8		(7 << I2C_ADDRLEN_OFFSET)
+#define I2C_DEVADLEN_7		(6 << I2C_DEVADLEN_OFFSET)
+#define I2C_CONF_DEFAULT	(I2C_ADDRLEN_8 | I2C_DEVADLEN_7)
+
+/* REG_CLKDIV_REG */
+#define I2C_CLKDIV_MASK		0xffff
+
+/* REG_DEVADDR_REG */
+#define I2C_DEVADDR_MASK	0x7f
+
+/* REG_ADDR_REG */
+#define I2C_ADDR_MASK		0xff
+
+//#define I2C_RST			(1<<16)
+#define I2C_STARTERR		BIT(4)
+#define I2C_ACKERR		BIT(3)
+#define I2C_DATARDY		BIT(2)
+#define I2C_SDOEMPTY		BIT(1)
+#define I2C_BUSY		BIT(0)
+
+#define I2C_ADDRDIS		BIT(1)
+
+#define CLKDIV_VALUE		200
+
+#define SM0CTL0_OD		BIT(31)
+#define SM0CTL0_VTRIG		BIT(28)
+#define SM0CTL0_OUTHI		BIT(6)
+#define SM0CTL0_STRETCH		BIT(1)
+#define SM0CTL0_DEFAULT		(SM0CTL0_OD | SM0CTL0_VTRIG | SM0CTL0_OUTHI | SM0CTL0_STRETCH)
+
+#define BYTECNT_MAX			64
+#define SET_BYTECNT(x)		(x - 1)
+
+#define NOSTOP_CMD			BIT(2)
+#define NODATA_CMD			BIT(1)
+#define READ_CMD			BIT(0)
+
+#define TIMEOUT_MS			1000
+#define DELAY_INTERVAL_US	100
+
+struct rt_i2c {
+	void __iomem *base;
+	struct device *dev;
+	struct i2c_adapter adap;
+};
+
+
+static void rt_i2c_w32(struct rt_i2c *i2c, u32 val, unsigned reg)
+{
+	iowrite32(val, i2c->base + reg);
+}
+
+static u32 rt_i2c_r32(struct rt_i2c *i2c, unsigned reg)
+{
+	return ioread32(i2c->base + reg);
+}
+
+static int poll_down_timeout(void __iomem *addr, u32 mask)
+{
+	unsigned long timeout = jiffies + msecs_to_jiffies(TIMEOUT_MS);
+
+	do {
+		if (!(readl_relaxed(addr) &mask))
+			return 0;
+
+		usleep_range(DELAY_INTERVAL_US, DELAY_INTERVAL_US + 50);
+	} while (time_before(jiffies, timeout));
+
+	return (readl_relaxed(addr) & mask) ? -EAGAIN : 0;
+}
+
+static int rt_i2c_wait_idle(struct rt_i2c *i2c)
+{
+	//while (rt_i2c_r32(REG_STATUS_REG) & I2C_BUSY);
+	int ret;
+
+	ret = poll_down_timeout(i2c->base + REG_STATUS_REG, I2C_BUSY);
+
+	if (ret < 0)
+		dev_dbg(i2c->dev, "idle err(%d)\n", ret);
+
+	return ret;
+}
+
+static int poll_up_timeout(void __iomem *addr, u32 mask)
+{
+	unsigned long timeout = jiffies + msecs_to_jiffies(TIMEOUT_MS);
+	u32 status;
+
+	do {
+		status = readl_relaxed(addr);
+
+		if (status & I2C_STARTERR)
+			return -EAGAIN;
+		else if (status & I2C_ACKERR)
+			return -ENXIO;
+		else if (status & mask)
+			return 0;
+
+		usleep_range(DELAY_INTERVAL_US, DELAY_INTERVAL_US + 50);
+	} while (time_before(jiffies, timeout));
+
+	return -ETIMEDOUT;
+}
+
+static inline int rt_i2c_wait_rx_done(struct rt_i2c *i2c)
+{
+	int ret ;
+
+	ret = poll_up_timeout(i2c->base + REG_STATUS_REG, I2C_DATARDY);
+	if (ret < 0)
+		dev_dbg(i2c->dev, "rx err(%d)\n", ret);
+
+	return ret;
+}
+
+static inline int rt_i2c_wait_tx_done(struct rt_i2c *i2c)
+{
+	int ret;
+
+	ret = poll_up_timeout(i2c->base + REG_STATUS_REG, I2C_SDOEMPTY);
+	if (ret < 0)
+		dev_dbg(i2c->dev, "tx err(%d)\n", ret);
+
+	return ret;
+}
+
+static int rt_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
+		int num)
+{
+	struct rt_i2c *i2c;
+	struct i2c_msg *pmsg;
+	unsigned char addr;
+	int i, j, ret;
+	u32 cmd;
+
+	i2c = i2c_get_adapdata(adap);
+
+	for (i = 0; i < num; i++) {
+		pmsg = &msgs[i];
+		if (i == (num - 1))
+			cmd = 0;
+		else
+			cmd = NOSTOP_CMD;
+
+		dev_dbg(i2c->dev, "addr: 0x%x, len: %d, flags: 0x%x, stop: %d\n",
+				pmsg->addr, pmsg->len, pmsg->flags,
+				(cmd == 0)? 1 : 0);
+
+		if ((ret = rt_i2c_wait_idle(i2c)))
+			goto err_timeout;
+
+		if (pmsg->flags & I2C_M_TEN) {
+			rt_i2c_w32(i2c, I2C_CONF_DEFAULT, REG_CONFIG_REG);
+			addr = 0x78 | ((pmsg->addr >> 8) & 0x03);
+			rt_i2c_w32(i2c, addr & I2C_DEVADDR_MASK,
+					REG_DEVADDR_REG);
+			rt_i2c_w32(i2c, pmsg->addr & I2C_ADDR_MASK,
+					REG_ADDR_REG);
+		} else {
+			rt_i2c_w32(i2c, I2C_CONF_DEFAULT | I2C_ADDR_DIS,
+					REG_CONFIG_REG);
+			rt_i2c_w32(i2c, pmsg->addr & I2C_DEVADDR_MASK,
+					REG_DEVADDR_REG);
+		}
+
+		if (pmsg->len == 0)
+			cmd |= NODATA_CMD;
+		else
+			rt_i2c_w32(i2c, SET_BYTECNT(pmsg->len),
+					REG_BYTECNT_REG);
+
+		j = 0;
+		if (pmsg->flags & I2C_M_RD) {
+			cmd |= READ_CMD;
+			barrier();
+			rt_i2c_w32(i2c, cmd, REG_STARTXFR_REG);
+			do {
+				if ((ret = rt_i2c_wait_rx_done(i2c)))
+					goto err_timeout;
+				if (pmsg->len)
+					pmsg->buf[j] = rt_i2c_r32(i2c, 
+							REG_DATAIN_REG);
+				j++;
+			} while (j < pmsg->len);
+		} else {
+			do {
+				if (pmsg->len)
+					rt_i2c_w32(i2c, pmsg->buf[j],
+							REG_DATAOUT_REG);
+				if (j == 0) {
+					barrier();
+					rt_i2c_w32(i2c, cmd, REG_STARTXFR_REG);
+				}
+				if ((ret = rt_i2c_wait_tx_done(i2c)))
+					goto err_timeout;
+				j++;
+			} while (j < pmsg->len);
+		}
+	}
+	/* the return value is number of executed messages */
+	ret = i;
+
+	return ret;
+
+err_timeout:
+	device_reset(i2c->adap.dev.parent);
+	return ret;
+}
+
+static u32 rt_i2c_func(struct i2c_adapter *a)
+{
+	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
+}
+
+static const struct i2c_algorithm rt_i2c_algo = {
+	.master_xfer	= rt_i2c_master_xfer,
+	.functionality	= rt_i2c_func,
+};
+
+static const struct of_device_id i2c_rt_dt_ids[] = {
+	{ .compatible = "ralink,rt2880-i2c" },
+	{ /* sentinel */ }
+};
+
+MODULE_DEVICE_TABLE(of, i2c_rt_dt_ids);
+
+static void rt_i2c_init(struct rt_i2c *i2c)
+{
+	device_reset(i2c->adap.dev.parent);
+
+	udelay(500);
+
+	rt_i2c_w32(i2c, I2C_DEVADLEN_7 | I2C_ADDRDIS, REG_CONFIG_REG);
+
+	rt_i2c_w32(i2c, CLKDIV_VALUE, REG_CLKDIV_REG);
+}
+
+static int rt_i2c_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct rt_i2c *i2c;
+	struct i2c_adapter *adap;
+	const struct of_device_id *match;
+	int ret;
+
+	match = of_match_device(i2c_rt_dt_ids, &pdev->dev);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "no memory resource found\n");
+		return -ENODEV;
+	}
+	printk("TEST");
+	i2c = devm_kzalloc(&pdev->dev, sizeof(struct rt_i2c), GFP_KERNEL);
+	if (!i2c) {
+		dev_err(&pdev->dev, "failed to allocate i2c_adapter\n");
+		return -ENOMEM;
+	}
+
+	i2c->dev = &pdev->dev;
+
+	i2c->base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(i2c->base))
+		return PTR_ERR(i2c->base);
+
+	adap = &i2c->adap;
+	strlcpy(adap->name, dev_name(&pdev->dev), sizeof(adap->name));
+	adap->owner = THIS_MODULE;
+	adap->nr = pdev->id;
+	adap->timeout = HZ;
+	adap->algo = &rt_i2c_algo;
+	adap->class = I2C_CLASS_HWMON | I2C_CLASS_SPD;
+	adap->dev.parent = &pdev->dev;
+	adap->dev.of_node = pdev->dev.of_node;
+
+	i2c_set_adapdata(adap, i2c);
+
+	ret = i2c_add_numbered_adapter(adap);
+	if (ret)
+		return ret;
+
+	platform_set_drvdata(pdev, i2c);
+
+	rt_i2c_init(i2c);
+
+	dev_info(&pdev->dev, "loaded\n");
+
+	return 0;
+}
+
+static int rt_i2c_remove(struct platform_device *pdev)
+{
+	platform_set_drvdata(pdev, NULL);
+
+	return 0;
+}
+
+static struct platform_driver rt_i2c_driver = {
+	.probe		= rt_i2c_probe,
+	.remove		= rt_i2c_remove,
+	.driver		= {
+		.owner	= THIS_MODULE,
+		.name	= "i2c-ralink",
+		.of_match_table = i2c_rt_dt_ids,
+	},
+};
+
+static int __init i2c_rt_init (void)
+{
+	return platform_driver_register(&rt_i2c_driver);
+}
+subsys_initcall(i2c_rt_init);
+
+static void __exit i2c_rt_exit (void)
+{
+	platform_driver_unregister(&rt_i2c_driver);
+}
+
+module_exit (i2c_rt_exit);
+
+MODULE_AUTHOR("Steven Liu <steven_liu@mediatek.com>");
+MODULE_DESCRIPTION("Ralink I2c host driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:Ralink-I2C");

